name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -Pprod -DskipTests

      - name: Verify JAR File
        run: |
          echo 'Listing files in target directory...'
          ls -l target/

      - name: Upload JAR
        uses: actions/upload-artifact@v2
        with:
          name: RegaloLibre-jar
          path: target/RegaloLibre-0.0.1-SNAPSHOT.jar

  deploy:
    name: Start the Web Service on EC2
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v2
        with:
          name: RegaloLibre-jar

      #      - name: Check connectivity
      #        run: |
      #          echo 'Checking network connectivity to ${HOST} on port 22...'
      #          nc -zv ${{ secrets.EC2_HOST }} 22

      - name: Test SSH Connectivity
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -i private_key -o StrictHostKeyChecking=no -vvv ${USER}@${HOST} 'echo "SSH connection successful"'

      #      - name: Check for Application Process
      #        env:
      #          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      #          HOST: ${{ secrets.EC2_HOST }}
      #          USER: ${{ secrets.EC2_USER }}
      #        run: |
      #          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
      #          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} 'ps aux | grep RegaloLibre-0.0.1-SNAPSHOT.jar'

      #      - name: Print Current Directory
      #        env:
      #          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      #          HOST: ${{ secrets.EC2_HOST }}
      #          USER: ${{ secrets.EC2_USER }}
      #        run: |
      #          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
      #          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} 'pwd' 'echo "pwd command executed"'

      #      - name: Check Application Logs
      #        env:
      #          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      #          HOST: ${{ secrets.EC2_HOST }}
      #          USER: ${{ secrets.EC2_USER }}
      #        run: |
      #          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
      #          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
      #            # Print the current directory
      #            echo "Current directory:"
      #            pwd
      #
      #            # List contents of the current directory
      #            echo "Contents of the current directory:"
      #            ls -l
      #            # Check if the log file exists and its size
      #            echo "Checking the existence and size of app.log"
      #            ls -l /home/ec2-user/app.log || echo "app.log does not exist"
      #          '

      - name: Remove file
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
          if [ -f /home/ec2-user/RegaloLibre-0.0.1-SNAPSHOT.jar ]; then
            echo "Removing old JAR file..."
            rm /home/ec2-user/RegaloLibre-0.0.1-SNAPSHOT.jar
            echo "File removed"
          else
            echo "File does not exist"
          fi
          '

      - name: Transfer JAR to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          echo "Transferring JAR file to EC2..."
          scp -i private_key -o StrictHostKeyChecking=no RegaloLibre-0.0.1-SNAPSHOT.jar ${USER}@${HOST}:/home/ec2-user/RegaloLibre-0.0.1-SNAPSHOT.jar
          echo "Checking transferred file..."
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} 'ls -l /home/ec2-user/RegaloLibre-0.0.1-SNAPSHOT.jar'
          echo "File transferred"

      - name: Stop Existing Application
        continue-on-error: true
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
            echo "Checking for existing application process..."
            ps aux | grep RegaloLibre-0.0.1-SNAPSHOT.jar | grep -v grep
            echo "Stopping existing application..."
            PID=$(pgrep -f RegaloLibre-0.0.1-SNAPSHOT.jar)
            echo "Found PID: $PID"
            if [ -n "$PID" ]; then 
              kill $PID
              echo "Application stopped"
            else
              echo "No application process found"
            fi
            echo "Ready to start new app"
          '

      - name: Start New Application
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
            echo "Starting new application..."
            cd /home/ec2-user
            nohup java -jar RegaloLibre-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod > app.log 2>&1 &
            echo "Application started"
          '

      - name: Test SSH Connectivity
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -i private_key -o StrictHostKeyChecking=no -vvv ${USER}@${HOST} 'echo "SSH connection successful"'

      - name: Verify Application Start
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
            echo "Checking if application started..."
            ps aux | grep RegaloLibre-0.0.1-SNAPSHOT.jar
            if pgrep -f RegaloLibre-0.0.1-SNAPSHOT.jar > /dev/null
            then
              echo "Application started successfully"
              tail -n 20 /home/ec2-user/app.log
            else
              echo "Application failed to start"
              cat /home/ec2-user/app.log
              exit 1
            fi
            '